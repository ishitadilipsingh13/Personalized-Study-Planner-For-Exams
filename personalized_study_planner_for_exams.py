# -*- coding: utf-8 -*-
"""Personalized_Study_Planner_for_Exams.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TJuj841F9nuq76u9BLuXu-1jG4-Qpw9k

# **Personalized Study Planner for Exams**

## Define Syllabus and Dependencies
"""

# -------------------------
# Define Syllabus
# -------------------------
# Syllabus tailored for a Computer Engineering student
# Each subject has a list of topics
syllabus = {
    "Mathematics": ["Discrete Mathematics", "Linear Algebra", "Probability & Statistics"],
    "Programming": ["C Programming", "Python Basics", "Object-Oriented Programming"],
    "Data Structures": ["Arrays & Linked Lists", "Stacks & Queues", "Trees & Graphs"],
    "Algorithms": ["Sorting Algorithms", "Searching Algorithms", "Dynamic Programming"],
    "Database Systems": ["SQL Basics", "Normalization", "Transactions & Indexing"],
    "Computer Networks": ["Network Models", "Routing & Switching", "Network Security"],
    "Operating Systems": ["Processes & Threads", "Memory Management", "File Systems"],
    "Software Engineering": ["SDLC Models", "Requirement Analysis", "Testing & QA"],
    "Web Development": ["HTML & CSS", "JavaScript", "Backend Basics"],
    "Artificial Intelligence": ["Machine Learning", "Neural Networks", "Natural Language Processing"]
}

# -------------------------
# Define Dependencies (Prerequisites)
# -------------------------
dependencies = {
    "Python Basics": ["C Programming"],
    "Object-Oriented Programming": ["Python Basics"],
    "Stacks & Queues": ["Arrays & Linked Lists"],
    "Trees & Graphs": ["Stacks & Queues"],
    "Dynamic Programming": ["Sorting Algorithms", "Searching Algorithms"],
    "Normalization": ["SQL Basics"],
    "Network Security": ["Routing & Switching"],
    "Memory Management": ["Processes & Threads"],
    "Testing & QA": ["Requirement Analysis"],
    "Neural Networks": ["Machine Learning"]
}

"""## Determine Learning Order"""

# -------------------------
# Determine Personalized Learning Order
# -------------------------
# Use Topological Sort (DFS) to respect prerequisites
def topo_sort(topics, deps):
    visited = set()
    order = []

    def dfs(topic):
        if topic in visited:
            return
        visited.add(topic)
        for prereq in deps.get(topic, []):
            dfs(prereq)
        order.append(topic)

    for subject_topics in topics.values():
        for topic in subject_topics:
            dfs(topic)

    return order[::-1]  # reverse to get correct learning order

learning_order = topo_sort(syllabus, dependencies)
print("Personalized Learning Order of Topics:")
print(learning_order)

"""## Allocate Study Hours"""

# -------------------------
# Allocate Study Hours
# -------------------------
# Assign estimated hours per topic
topic_hours = {
    "Discrete Mathematics": 3, "Linear Algebra": 3, "Probability & Statistics": 2,
    "C Programming": 3, "Python Basics": 3, "Object-Oriented Programming": 4,
    "Arrays & Linked Lists": 3, "Stacks & Queues": 3, "Trees & Graphs": 4,
    "Sorting Algorithms": 3, "Searching Algorithms": 3, "Dynamic Programming": 5,
    "SQL Basics": 3, "Normalization": 2, "Transactions & Indexing": 3,
    "Network Models": 3, "Routing & Switching": 3, "Network Security": 4,
    "Processes & Threads": 3, "Memory Management": 3, "File Systems": 3,
    "SDLC Models": 2, "Requirement Analysis": 3, "Testing & QA": 3,
    "HTML & CSS": 2, "JavaScript": 3, "Backend Basics": 3,
    "Machine Learning": 3, "Neural Networks": 3, "Natural Language Processing": 3
}

total_hours = 40  # User-defined total study hours
print("Personalized Study Hours Allocation:")
for topic in learning_order:
    if topic_hours.get(topic, 0) <= total_hours:
        print(f"Study {topic} for {topic_hours[topic]} hours")
        total_hours -= topic_hours[topic]
    else:
        print(f"Not enough time left for {topic}")

"""## Keyword Search"""

# -------------------------
# Search for Key Topics
# -------------------------
keyword = "Programming"  # Example: user wants to focus on programming topics
print(f"Keyword Search Results for '{keyword}':")
for subject, topics in syllabus.items():
    for topic in topics:
        if keyword.lower() in topic.lower():
            print(f"Found in {subject} â†’ {topic}")

"""## Detect Exam Conflicts"""

# -------------------------
# Detect Exam Date Conflicts
# -------------------------
exam_dates = {
    "Mathematics": "2025-10-10",
    "Programming": "2025-10-11",
    "Data Structures": "2025-10-12",
    "Algorithms": "2025-10-13",
    "Database Systems": "2025-10-12",
    "Computer Networks": "2025-10-14",
    "Operating Systems": "2025-10-15",
    "Software Engineering": "2025-10-11",
    "Web Development": "2025-10-13",
    "Artificial Intelligence": "2025-10-14"
}

print("Exam Conflicts:")
dates = {}
for subject, date in exam_dates.items():
    if date in dates:
        print(f"Conflict on {date}: {dates[date]} and {subject}")
    else:
        dates[date] = subject

"""## Generate Revision Plan"""

# -------------------------
# Personalized Revision Plan
# -------------------------
revision_plan = {}
days = 7  # Number of days for revision

for i, topic in enumerate(learning_order):
    day = (i % days) + 1
    revision_plan.setdefault(day, []).append(topic)

print("Personalized Revision Plan:")
for day, topics in revision_plan.items():
    print(f"Day {day}: {topics}")

"""## Visualize Topic Dependencies"""

# -------------------------
# Personalized Revision Plan
# -------------------------
revision_plan = {}
days = 7  # Number of days for revision

for i, topic in enumerate(learning_order):
    day = (i % days) + 1
    revision_plan.setdefault(day, []).append(topic)

print("Personalized Revision Plan:")
for day, topics in revision_plan.items():
    print(f"Day {day}: {topics}")

pip install networkx matplotlib

!python Personalized_Study_Planner_for_Exams.py

